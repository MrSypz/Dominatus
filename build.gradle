plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    accessWidenerPath = file("src/main/resources/dominatus.accesswidener")
}

repositories {
    maven {
        name = "αccessories"
        url = 'https://maven.wispforest.io/releases'
    }

    maven {
        name = "My Library"
        url = "https://jitpack.io"
    }
    maven {
        name = "Cloth Config"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    //CCA
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }
    //SODIUM
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        name = "Jade"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}
fabricApi {
    configureDataGeneration() {
        client = true
    }
}
dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation include("org.ladysnake.cardinal-components-api:cardinal-components-base:${cardinal_components_version}")
    modImplementation include("org.ladysnake.cardinal-components-api:cardinal-components-entity:${cardinal_components_version}")

    modApi "com.github.MrSypz:Knumber:${knumber_version}"
    modImplementation include("com.github.MrSypz:Tyrannus:${tyranus_version}")

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modRuntimeOnly "maven.modrinth:sodium:${sodium_version}"
    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

    modImplementation("io.wispforest:accessories-fabric:${project.accessories_version}")

    modImplementation "curse.maven:jade-324717:${jade_version}"

    modCompileOnly "maven.modrinth:ranged-weapon-api:${project.ranged_weapon_api_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "cloth_config_version": project.cloth_version,
                "accessories_version" : project.accessories_version,
                "knumber_veriosn": project.knumber_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

def envFile = new File('.env')
if (envFile.exists()) {
    envFile.eachLine { line ->
        def (key, value) = line.tokenize('=')
        if (key && value) {
            project.ext.set(key.trim(), value.trim())
        }
    }
}


modrinth {
    token = project.ext.has('MODRINTH_TOKEN') ? project.ext.MODRINTH_TOKEN : System.getenv("MODRINTH_TOKEN")
    projectId = "GXWZHp1x"
    versionNumber = project.mod_version+"-"+project.minecraft_version
    versionType = "beta" // This is the default -- can also be `beta` or `alpha`
    uploadFile = remapJar
    gameVersions = ["1.21", "1.21.1"]
    loaders = ["fabric"]
    changelog = """
## Bug Fixes
- Fixed repair point system for SimplySwords weapon compatibility

## Technical Changes
- Centralized stats information system for consistency
- Change accuracy cap to 100% from 95%

## Combat System Changes

### New Damage System v3
The main goal of this is bypass the 30 armor points vanilla limit which prevents users from having high armor values.

**System Comparison:**

| Feature                 | Vanilla Minecraft | Dominatus v2 | Dominatus v3                              |
|-------------------------|------------------|---------------|-------------------------------------------|
| **Base Formula**        | Complex formula with diminishing returns | Bracket-based system | Simple: `damage = damage - defense`       |
| **Defense Calculation** | `armor - (damage / (2 + toughness/4))` | DP brackets with linear interpolation | `defense = armor + (armorToughness * 1.2)`  |
| **Maximum Reduction**   | Can reach 100% | Hard cap at 30% | Hard cap at 90%                           |
| **Armor Penetration**   | Modifies effectiveness value | Not directly addressed | Directly reduces final damage reduction % |
| **High Armor**          | Diminishing returns after 20 armor | Bracket system caps benefits | Linear scaling with 90% maximum           |
| **Armor Toughness**     | Reduces impact of high damage | Small bonus (2-3% at 12 DR) | Direct 1.2× multiplier to defense         |

"""
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "fabric-api" // Creates a new required dependency on Fabric API
        required.project "cloth-config"
        required.project "modmenu"
        required.project "accessories"
        required.version "knumber", "1.0.2-1.21.1"
        required.version "reduced-invincibility-frames", "1.0.1-1.21.1"
        optional.project "jade"
        incompatible.project "forgified-fabric-api"
        incompatible.project "connector"
        embedded.project "cardinal-components-api"
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {
    }
}
